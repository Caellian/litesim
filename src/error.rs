use thiserror::Error;

use crate::prelude::SimulationTime;

#[derive(Debug, Error)]
pub enum ValidationError {
    #[error("Simulation missing a model with id: {id}")]
    MissingModel { id: String },
    #[error("A model '{model}' is missing connector: {id}")]
    MissingConnector { model: String, id: String },
    #[error("Connection output ({output_model}::{output_connector}) and input ({input_model}::{input_connector}) types do not match")]
    ConnectionTypeMismatch {
        output_model: String,
        output_connector: String,
        input_model: String,
        input_connector: String,
    },
}

#[derive(Debug, Error)]
pub enum SchedulerError {
    #[error("Tried scheduling an occurence in the past: {insertion}; current time is: {current}")]
    TimeRegression {
        current: SimulationTime,
        insertion: SimulationTime,
    },
}

#[derive(Debug, Error)]
pub enum RoutingError {
    #[error("Connector '{connector}' got invalid event type: {event_type}; expected: {expected}")]
    InvalidEventType {
        connector: &'static str,
        event_type: &'static str,
        expected: &'static str,
    },
    #[error("Model '{model}' doesn't have an input connector named '{connector}'")]
    UnknownModelConnector { model: String, connector: String },
    #[error("Event generated by {model} is missing a target")]
    MissingEventTarget { model: String },
}

#[derive(Debug, Error)]
pub enum SimulationError {
    #[error("Unable to locate model: {id}")]
    ModelNotFound { id: String },

    #[error("Scheduler error: {0}")]
    Scheduler(
        #[from]
        #[source]
        SchedulerError,
    ),
    #[error("Unable to validate model: {0}")]
    Validation(
        #[from]
        #[source]
        ValidationError,
    ),
    #[error("Routing error: {0}")]
    Routing(
        #[from]
        #[source]
        RoutingError,
    ),
    #[error(transparent)]
    Other(Box<dyn std::error::Error>),
}
